/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#define SWIGTEMPLATEDISAMBIGUATOR template
#elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#define SWIGTEMPLATEDISAMBIGUATOR template
#else
#define SWIGTEMPLATEDISAMBIGUATOR
#endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#define SWIGINLINE inline
#else
#define SWIGINLINE
#endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#elif defined(__ICC)
#define SWIGUNUSED __attribute__((__unused__))
#else
#define SWIGUNUSED
#endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#if defined(_MSC_VER)
#pragma warning(disable : 4505) /* unreferenced local function has been removed */
#endif
#endif

#ifndef SWIGUNUSEDPARM
#ifdef __cplusplus
#define SWIGUNUSEDPARM(p)
#else
#define SWIGUNUSEDPARM(p) p SWIGUNUSED
#endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#ifndef GCC_HASCLASSVISIBILITY
#define GCC_HASCLASSVISIBILITY
#endif
#endif
#endif

#ifndef SWIGEXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define SWIGEXPORT
#else
#define SWIGEXPORT __declspec(dllexport)
#endif
#else
#if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define SWIGEXPORT __attribute__((visibility("default")))
#else
#define SWIGEXPORT
#endif
#endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#define SWIGSTDCALL __stdcall
#else
#define SWIGSTDCALL
#endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
#define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
#define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
#pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >= 201103L
#define SWIG_NULLPTR nullptr
#else
#define SWIG_NULLPTR NULL
#endif

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || (defined __cplusplus && __cplusplus >= 201103L) ||   \
     defined SWIG_HAVE_SNPRINTF) &&                                                                                    \
    !defined SWIG_NO_SNPRINTF
#define SWIG_snprintf(O, S, F, A) snprintf(O, S, F, A)
#define SWIG_snprintf2(O, S, F, A, B) snprintf(O, S, F, A, B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
#define SWIG_snprintf(O, S, F, A) sprintf(O, F, A)
#define SWIG_snprintf2(O, S, F, A, B) sprintf(O, F, A, B)
#endif

#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr) SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))

#define SWIG_NAPI_FROM_DECL_ARGS(arg1) (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1) (env, arg1)

#define SWIG_exception_fail(code, msg)                                                                                 \
  do {                                                                                                                 \
    SWIG_Error(code, msg);                                                                                             \
    SWIG_fail;                                                                                                         \
  } while (0)

#define SWIG_contract_assert(expr, msg)                                                                                \
  do {                                                                                                                 \
    if (!(expr)) {                                                                                                     \
      SWIG_Error(SWIG_RuntimeError, msg);                                                                              \
      SWIG_fail;                                                                                                       \
    }                                                                                                                  \
  } while (0)

#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <assert.h>
#include <errno.h>
#include <limits.h>
#include <map>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
#define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN 0x1
#define SWIG_CAST_NEW_MEMORY 0x2
#define SWIG_POINTER_NO_NULL 0x4
#define SWIG_POINTER_CLEAR 0x8
#define SWIG_POINTER_RELEASE (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN 0x1

/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
        delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r) (r >= 0)
#define SWIG_ArgError(r) ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK (SWIG_CASTRANKLIMIT << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ (SWIG_ERROR)
#define SWIG_OLDOBJ (SWIG_OK)
#define SWIG_NEWOBJ (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r) (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r) (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r) (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r) (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r) (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#ifndef SWIG_TypeRank
#define SWIG_TypeRank unsigned long
#endif
#ifndef SWIG_MAXCASTRANK /* Default cast allowed */
#define SWIG_MAXCASTRANK (2)
#endif
#define SWIG_CASTRANKMASK ((SWIG_CASTRANKLIMIT)-1)
#define SWIG_CastRank(r) (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; }
#else /* no cast-rank mode */
#define SWIG_AddCast(r) (r)
#define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char *name;            /* mangled name of this type */
  const char *str;             /* human readable name of this type */
  swig_dycast_func dcast;      /* dynamic cast function down a hierarchy */
  struct swig_cast_info *cast; /* linked list of types that can cast into this type */
  void *clientdata;            /* language specific type data */
  int owndata;                 /* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info *type;          /* pointer to type that is equivalent to this type */
  swig_converter_func converter; /* function to cast the void pointers */
  struct swig_cast_info *next;   /* pointer to next cast in linked list */
  struct swig_cast_info *prev;   /* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info **types;        /* Array of pointers to swig_type_info structures that are in this module */
  size_t size;                   /* Number of types in this module */
  struct swig_module_info *next; /* Pointer to next element in circularly linked list */
  swig_type_info **type_initial; /* Array of initially generated type structures */
  swig_cast_info **cast_initial; /* Array of initially generated casting structures */
  void *clientdata;              /* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int SWIG_TypeNameComp(const char *f1, const char *l1, const char *f2, const char *l2) {
  for (; (f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1))
      ++f1;
    while ((*f2 == ' ') && (f2 != l2))
      ++f2;
    if (*f1 != *f2)
      return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char *te = tb + strlen(tb);
  const char *ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|')
        break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne)
      ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int SWIG_TypeEquiv(const char *nb, const char *tb) { return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0; }

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast)
          ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast)
          ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast)
    return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty)
      lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *SWIG_TypeName(const swig_type_info *ty) { return ty->name; }

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type)
    return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|')
        last_name = s + 1;
    return last_name;
  } else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
        SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *SWIG_MangledTypeQueryModule(swig_module_info *start, swig_module_info *end,
                                                        const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
        /* since l+r >= 0, we can (>> 1) instead (/ 2) */
        size_t i = (l + r) >> 1;
        const char *iname = iter->types[i]->name;
        if (iname) {
          int compare = strcmp(name, iname);
          if (compare == 0) {
            return iter->types[i];
          } else if (compare < 0) {
            if (i) {
              r = i - 1;
            } else {
              break;
            }
          } else if (compare > 0) {
            l = i + 1;
          }
        } else {
          break; /* should never happen */
        }
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *SWIG_TypeQueryModule(swig_module_info *start, swig_module_info *end, const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
        if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
          return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *)ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *)ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a' - 10)) << 4);
    else
      return (char *)0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a' - 10));
    else
      return (char *)0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2 * sizeof(void *) + 2) > bsz)
    return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, &ptr, sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff)))
    return 0;
  strcpy(r, name);
  return buff;
}

SWIGRUNTIME const char *SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c, "NULL") == 0) {
      *ptr = (void *)0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c, ptr, sizeof(void *));
}

SWIGRUNTIME char *SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2 * sz + 2 + lname) > bsz)
    return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  if (lname) {
    strncpy(r, name, lname + 1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c, "NULL") == 0) {
      memset(ptr, 0, sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c, ptr, sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define SWIG_UnknownError -1
#define SWIG_IOError -2
#define SWIG_RuntimeError -3
#define SWIG_IndexError -4
#define SWIG_TypeError -5
#define SWIG_DivisionByZero -6
#define SWIG_OverflowError -7
#define SWIG_SyntaxError -8
#define SWIG_ValueError -9
#define SWIG_SystemError -10
#define SWIG_AttributeError -11
#define SWIG_MemoryError -12
#define SWIG_NullReferenceError -13

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg) SWIG_Error(code, msg)
#define SWIG_fail goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg) SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe) (maybe)
#define NAPI_CHECK_RESULT(maybe, result) (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) { throw Napi::Error::New(env, msg); }

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch (type) {
  default:
  case SWIG_IOError:
  case SWIG_MemoryError:
  case SWIG_SystemError:
  case SWIG_RuntimeError:
  case SWIG_DivisionByZero:
  case SWIG_SyntaxError:
    throw Napi::Error::New(env, msg);
  case SWIG_OverflowError:
  case SWIG_IndexError:
    throw Napi::RangeError::New(env, msg);
  case SWIG_ValueError:
  case SWIG_TypeError:
    throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj, const char *msg = nullptr,
                                swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)                                                                                          \
  do {                                                                                                                 \
    SWIG_NAPI_Raise(env, code, msg);                                                                                   \
    SWIG_fail;                                                                                                         \
  } while (0)
#define NAPI_CHECK_MAYBE(maybe)                                                                                        \
  do {                                                                                                                 \
    if (maybe.IsNothing())                                                                                             \
      SWIG_fail;                                                                                                       \
  } while (0)
#define NAPI_CHECK_RESULT(maybe, result)                                                                               \
  do {                                                                                                                 \
    auto r = maybe;                                                                                                    \
    if (r.IsNothing())                                                                                                 \
      SWIG_fail;                                                                                                       \
    result = r.Unwrap();                                                                                               \
  } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch (type) {
  default:
  case SWIG_IOError:
  case SWIG_MemoryError:
  case SWIG_SystemError:
  case SWIG_RuntimeError:
  case SWIG_DivisionByZero:
  case SWIG_SyntaxError:
    Napi::Error::New(env, msg).ThrowAsJavaScriptException();
    return;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
    return;
  case SWIG_ValueError:
  case SWIG_TypeError:
    Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
    return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj, const char *msg = nullptr,
                                swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP> class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
public:
  void *self;
  bool owned;
  size_t size;
  swig_type_info *info;
  SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
  SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info)
      : Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), self(nullptr), owned(true), size(0), info(nullptr) {}
  virtual ~SWIG_NAPI_ObjectWrap_templ(){};

  Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info)
    : Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}", this->info ? this->info->name : "unknown",
           name ? name : "unknown", this->self, this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(Napi::Env, std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
                         std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &);
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
    Napi::Env env, std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &) {
  members.erase("toString");
  members.insert(
      {"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if (!objRef.IsObject())
    return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if (info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if (!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if (ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ? reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) : nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags) SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags) SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags) SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags) SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type) SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type) SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr) SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *)0;
  void *arg2 = (void *)0;
  bool result;
  int res1;
  int res2;

  if (info.Length() != 1)
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '"
                                    "equals"
                                    "', argument "
                                    "1"
                                    " of type '"
                                    "void *"
                                    "'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *)0;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '"
                                    "getCPtr"
                                    "', argument "
                                    "1"
                                    " of type '"
                                    "void *"
                                    "'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty())
    goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty) SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type) SWIG_NAPI_NewPackedObj(env, ptr, sz, type)

/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SemaphoreV swig_types[0]
#define SWIGTYPE_p_Token swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_key_t swig_types[3]
static swig_type_info *swig_types[5];
static swig_module_info swig_module = {swig_types, 4, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template <typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) {}
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer &operator=(SwigSmartPointer &rhs) {
      T *oldptr = ptr;
      ptr = 0;
      delete oldptr;
      ptr = rhs.ptr;
      rhs.ptr = 0;
      return *this;
    }
    void reset(T *p) {
      T *oldptr = ptr;
      ptr = 0;
      delete oldptr;
      ptr = p;
    }
  } pointer;
  SwigValueWrapper &operator=(const SwigValueWrapper<T> &rhs);
  SwigValueWrapper(const SwigValueWrapper<T> &rhs);

public:
  SwigValueWrapper() : pointer(0) {}
  SwigValueWrapper &operator=(const T &t) {
    SwigSmartPointer tmp(new T(t));
    pointer = tmp;
    return *this;
  }
#if __cplusplus >= 201103L
  SwigValueWrapper &operator=(T &&t) {
    SwigSmartPointer tmp(new T(std::move(t)));
    pointer = tmp;
    return *this;
  }
  operator T &&() const { return std::move(*pointer.ptr); }
#else
  operator T &() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper &t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 *
 *       T c_result = T();
 *
 * doesn't compile for all types for example:
 *
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() { return T(); }

#if __cplusplus >= 201103L
#define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
#define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif

#define SWIG_as_voidptr(a) const_cast<void *>(static_cast<const void *>(a))
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a), reinterpret_cast<void **>(a))

#include <stdexcept>

#include <assert.h>

#define NAPI_ENABLE_CPP_EXCEPTIONS
#include "error.h"
#include "semaphore-sysv.h"

#include <errnoname.c>
#include <napi.h>
#include <string>
#include <system_error>

SWIGINTERN swig_type_info *SWIG_pchar_descriptor(void) {
  static int init = 0;
  static swig_type_info *info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}

SWIGINTERN int SWIG_AsCharPtrAndSize(Napi::Value valRef, char **cptr, size_t *psize, int *alloc) {
  if (valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char *cstr = (char *)(new char[len]());
    memcpy(cstr, str.data(), len);

    if (alloc)
      *alloc = SWIG_NEWOBJ;
    if (psize)
      *psize = len;
    if (cptr)
      *cptr = cstr;

    return SWIG_OK;
  } else {
    if (valRef.IsObject()) {
      swig_type_info *pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void *vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr)
            *cptr = (char *)vptr;
          if (psize)
            *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc)
            *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}

SWIGINTERN int SWIG_AsCharArray(Napi::Value obj, char *val, size_t size) {
  char *cptr = 0;
  size_t csize = 0;
  int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1])
      --csize;
    if (csize <= size) {
      if (val) {
        if (csize)
          memcpy(val, cptr, csize * sizeof(char));
        if (csize < size)
          memset(val + csize, 0, (size - csize) * sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
        delete[] cptr;
        res = SWIG_DelNewMask(res);
      }
      return res;
    }
    if (alloc == SWIG_NEWOBJ)
      delete[] cptr;
  }
  return SWIG_TypeError;
}

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
#if !defined(LLONG_MAX) && defined(__GNUC__) && defined(__LONG_LONG_MAX__)
#define LLONG_MAX __LONG_LONG_MAX__
#define LLONG_MIN (-LLONG_MAX - 1LL)
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
#endif
#endif

SWIGINTERN
int SWIG_AsVal_double(Napi::Value obj, double *val) {
  if (!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

#include <float.h>

#include <math.h>

SWIGINTERNINLINE int SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
    double fx, cx, rd;
    errno = 0;
    fx = floor(x);
    cx = ceil(x);
    rd = ((x - fx) < 0.5) ? fx : cx; /* simple rint */
    if ((errno == EDOM) || (errno == ERANGE)) {
      errno = 0;
    } else {
      double summ, reps, diff;
      if (rd < x) {
        diff = x - rd;
      } else if (rd > x) {
        diff = rd - x;
      } else {
        return 1;
      }
      summ = rd + x;
      reps = diff / summ;
      if (reps < 8 * DBL_EPSILON) {
        *d = rd;
        return 1;
      }
    }
  }
  return 0;
}

SWIGINTERN
int SWIG_AsVal_long(Napi::Value obj, long *val) {
  if (!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<long>(num.Int64Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN int SWIG_AsVal_char(Napi::Value obj, char *val) {
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
        if (val)
          *val = static_cast<char>(v);
      } else {
        res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val) { return Napi::Number::New(env, val); }

SWIGINTERN
int SWIG_AsVal_int(Napi::Value valRef, int *val) {
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN
int SWIG_AsVal_unsigned_SS_int(Napi::Value valRef, unsigned int *val) {
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val) { return Napi::Boolean::New(env, val); }

SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val) { return Napi::Number::New(env, val); }

#define SWIG_NAPI_INIT main_initialize

// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP> class _exports_Token_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Token_templ(const Napi::CallbackInfo &);
  _exports_Token_templ(bool, const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_Token_key_get(const Napi::CallbackInfo &);
  // jsnapi_class_setter_declaration
  void _wrap_Token_key_set(const Napi::CallbackInfo &, const Napi::Value &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_new_Token(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_Token___ref__(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_Token_valueOf(const Napi::CallbackInfo &);
  virtual ~_exports_Token_templ();
  // jsnapi_class_epilogue_template
  static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
  void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_Token_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info,
                                                                      const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_Token_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info,
                                                               const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_Token_inst : public _exports_Token_templ<_exports_Token_inst> {
public:
  using _exports_Token_templ::_exports_Token_templ;
  virtual ~_exports_Token_inst(){

  };
  static void GetMembers(Napi::Env, std::map<std::string, _exports_Token_templ::PropertyDescriptor> &,
                         std::map<std::string, _exports_Token_templ::PropertyDescriptor> &);
  static Napi::Function GetClass(Napi::Env);
};
/* Class: Token (_exports_Token) */
// jsnapi_getclass
Napi::Function _exports_Token_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Token_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);

  std::vector<_exports_Token_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
    symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
    symbolTable.push_back(it->second);

  return Napi::ObjectWrap<_exports_Token_inst>::DefineClass(env, "Token", symbolTable);
}

void _exports_Token_inst::GetMembers(Napi::Env env,
                                     std::map<std::string, _exports_Token_templ::PropertyDescriptor> &members,
                                     std::map<std::string, _exports_Token_templ::PropertyDescriptor> &staticMembers) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers,
      baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());

  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("key");
  members.insert(
      {"key", _exports_Token_templ::InstanceAccessor(
                  "key", &_exports_Token_templ::_wrap_Token_key_get, &_exports_Token_templ::_wrap_Token_key_set,
                  static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("__ref__");
  members.insert({"__ref__", _exports_Token_templ::InstanceMethod(
                                 "__ref__", &_exports_Token_templ::_wrap_Token___ref__,
                                 static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("valueOf");
  members.insert({"valueOf", _exports_Token_templ::InstanceMethod(
                                 "valueOf", &_exports_Token_templ::_wrap_Token_valueOf,
                                 static_cast<napi_property_attributes>(napi_writable | napi_configurable))});

  /* add static class functions and variables */
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP> class _exports_SemaphoreV_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_SemaphoreV_templ(const Napi::CallbackInfo &);
  _exports_SemaphoreV_templ(bool, const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  static Napi::Value _wrap_SemaphoreV_createExclusive(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  static Napi::Value _wrap_SemaphoreV_create(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  static Napi::Value _wrap_SemaphoreV_open(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  static Napi::Value _wrap_SemaphoreV_unlink(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_wait__SWIG_0(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_wait__SWIG_1(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV__wrap_SemaphoreV_wait(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_trywait__SWIG_0(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_trywait__SWIG_1(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV__wrap_SemaphoreV_trywait(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_post__SWIG_0(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_post__SWIG_1(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV__wrap_SemaphoreV_post(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_valueOf(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_refs(const Napi::CallbackInfo &);
  // jsnapi_class_method_declaration
  Napi::Value _wrap_SemaphoreV_close(const Napi::CallbackInfo &);
  virtual ~_exports_SemaphoreV_templ();
  // jsnapi_class_epilogue_template
  static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
  void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info,
                                                                           const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info,
                                                                    const Napi::Value &value) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_SemaphoreV_inst : public _exports_SemaphoreV_templ<_exports_SemaphoreV_inst> {
public:
  using _exports_SemaphoreV_templ::_exports_SemaphoreV_templ;
  virtual ~_exports_SemaphoreV_inst(){

  };
  static void GetMembers(Napi::Env, std::map<std::string, _exports_SemaphoreV_templ::PropertyDescriptor> &,
                         std::map<std::string, _exports_SemaphoreV_templ::PropertyDescriptor> &);
  static Napi::Function GetClass(Napi::Env);
};
/* Class: SemaphoreV (_exports_SemaphoreV) */
// jsnapi_getclass
Napi::Function _exports_SemaphoreV_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_SemaphoreV_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);

  std::vector<_exports_SemaphoreV_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
    symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
    symbolTable.push_back(it->second);

  return Napi::ObjectWrap<_exports_SemaphoreV_inst>::DefineClass(env, "SemaphoreV", symbolTable);
}

void _exports_SemaphoreV_inst::GetMembers(
    Napi::Env env, std::map<std::string, _exports_SemaphoreV_templ::PropertyDescriptor> &members,
    std::map<std::string, _exports_SemaphoreV_templ::PropertyDescriptor> &staticMembers) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers,
      baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());

  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("wait");
  members.insert({"wait", _exports_SemaphoreV_templ::InstanceMethod(
                              "wait", &_exports_SemaphoreV_templ::_wrap_SemaphoreV__wrap_SemaphoreV_wait,
                              static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("trywait");
  members.insert({"trywait", _exports_SemaphoreV_templ::InstanceMethod(
                                 "trywait", &_exports_SemaphoreV_templ::_wrap_SemaphoreV__wrap_SemaphoreV_trywait,
                                 static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("post");
  members.insert({"post", _exports_SemaphoreV_templ::InstanceMethod(
                              "post", &_exports_SemaphoreV_templ::_wrap_SemaphoreV__wrap_SemaphoreV_post,
                              static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("valueOf");
  members.insert({"valueOf", _exports_SemaphoreV_templ::InstanceMethod(
                                 "valueOf", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_valueOf,
                                 static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("refs");
  members.insert({"refs", _exports_SemaphoreV_templ::InstanceMethod(
                              "refs", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_refs,
                              static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_member_function_descriptor
  members.erase("close");
  members.insert({"close", _exports_SemaphoreV_templ::InstanceMethod(
                               "close", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_close,
                               static_cast<napi_property_attributes>(napi_writable | napi_configurable))});

  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("createExclusive");
  staticMembers.insert(
      {"createExclusive", StaticMethod("createExclusive", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_createExclusive,
                                       static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_register_static_function
  staticMembers.erase("create");
  staticMembers.insert(
      {"create", StaticMethod("create", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_create,
                              static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_register_static_function
  staticMembers.erase("open");
  staticMembers.insert(
      {"open", StaticMethod("open", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_open,
                            static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
  // jsnapi_register_static_function
  staticMembers.erase("unlink");
  staticMembers.insert(
      {"unlink", StaticMethod("unlink", &_exports_SemaphoreV_templ::_wrap_SemaphoreV_unlink,
                              static_cast<napi_property_attributes>(napi_writable | napi_configurable))});
}

// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_Token_templ<SWIG_OBJ_WRAP>::_wrap_Token_key_set(const Napi::CallbackInfo &info,
                                                              const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = (Token *)0;
  key_t arg2;
  void *argp1 = 0;
  int res1 = 0;
  void *argp2;
  int res2 = 0;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_Token, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "Token_key_set"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token *"
                                             "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  {
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_key_t, 0);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '"
                                                 "Token_key_set"
                                                 "', argument "
                                                 "2"
                                                 " of type '"
                                                 "key_t"
                                                 "'");
      }
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference "
                                             "in method '"
                                             "Token_key_set"
                                             "', argument "
                                             "2"
                                             " of type '"
                                             "key_t"
                                             "'");
      } else {
        arg2 = *(reinterpret_cast<key_t *>(argp2));
      }
    }
  }
  if (arg1)
    (arg1)->key = arg2;

  return;

  goto fail;
fail:
  return;
}

// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Token_templ<SWIG_OBJ_WRAP>::_wrap_Token_key_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = (Token *)0;
  void *argp1 = 0;
  int res1 = 0;
  key_t result;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_Token, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "Token_key_get"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token *"
                                             "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  result = ((arg1)->key);
  jsresult = SWIG_NewPointerObj((new key_t(result)), SWIGTYPE_p_key_t, SWIG_POINTER_OWN | 0);

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_Token_templ<SWIG_OBJ_WRAP>::_exports_Token_templ(const Napi::CallbackInfo &info)
    : SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();

  this->info = SWIGTYPE_p_Token;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;

  char *arg1 = (char *)0;
  char arg2;
  int res1;
  char *buf1 = 0;
  int alloc1 = 0;
  char val2;
  int ecode2 = 0;
  Token *result;
  if (static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Token.");
  }
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "new_Token"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "char const *"
                                             "'");
  }
  arg1 = reinterpret_cast<char *>(buf1);
  ecode2 = SWIG_AsVal_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "new_Token"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "char"
                                               "'");
  }
  arg2 = static_cast<char>(val2);
  {
    try {
      result = (Token *)new Token((char const *)arg1, arg2);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }

  if (alloc1 == SWIG_NEWOBJ)
    delete[] buf1;

  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Token_templ<SWIG_OBJ_WRAP>::_exports_Token_templ(bool, const Napi::CallbackInfo &info)
    : SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Token_templ<SWIG_OBJ_WRAP>::_wrap_Token___ref__(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = (Token *)0;
  void *argp1 = 0;
  int res1 = 0;
  key_t result;

  if (static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Token___ref__.");
  }

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_Token, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "Token___ref__"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token *"
                                             "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  {
    try {
      result = (arg1)->operator*();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_NewPointerObj((new key_t(result)), SWIGTYPE_p_key_t, SWIG_POINTER_OWN | 0);

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Token_templ<SWIG_OBJ_WRAP>::_wrap_Token_valueOf(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = (Token *)0;
  void *argp1 = 0;
  int res1 = 0;
  int result;

  if (static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Token_valueOf.");
  }

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_Token, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "Token_valueOf"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token *"
                                             "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  {
    try {
      result = (int)(arg1)->valueOf();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int SWIG_NAPI_FROM_CALL_ARGS(static_cast<int>(result));

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP> _exports_Token_templ<SWIG_OBJ_WRAP>::~_exports_Token_templ() {
  auto arg1 = reinterpret_cast<Token *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_createExclusive(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = 0;
  int arg2;
  int arg3;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;
  int val3;
  int ecode3 = 0;
  SemaphoreV *result = 0;

  if (static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_createExclusive.");
  }

  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Token, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_createExclusive"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token &"
                                             "'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference "
                                         "in method '"
                                         "SemaphoreV_createExclusive"
                                         "', argument "
                                         "1"
                                         " of type '"
                                         "Token &"
                                         "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "SemaphoreV_createExclusive"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "int"
                                               "'");
  }
  arg2 = static_cast<int>(val2);
  ecode3 = SWIG_AsVal_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '"
                                               "SemaphoreV_createExclusive"
                                               "', argument "
                                               "3"
                                               " of type '"
                                               "int"
                                               "'");
  }
  arg3 = static_cast<int>(val3);
  {
    try {
      result = (SemaphoreV *)SemaphoreV::createExclusive(*arg1, arg2, arg3);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SemaphoreV, 0 | 0);

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_create(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = 0;
  int arg2;
  int arg3;
  void *argp1 = 0;
  int res1 = 0;
  int val2;
  int ecode2 = 0;
  int val3;
  int ecode3 = 0;
  SemaphoreV *result = 0;

  if (static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_create.");
  }

  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Token, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_create"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token &"
                                             "'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference "
                                         "in method '"
                                         "SemaphoreV_create"
                                         "', argument "
                                         "1"
                                         " of type '"
                                         "Token &"
                                         "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "SemaphoreV_create"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "int"
                                               "'");
  }
  arg2 = static_cast<int>(val2);
  ecode3 = SWIG_AsVal_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '"
                                               "SemaphoreV_create"
                                               "', argument "
                                               "3"
                                               " of type '"
                                               "int"
                                               "'");
  }
  arg3 = static_cast<int>(val3);
  {
    try {
      result = (SemaphoreV *)SemaphoreV::create(*arg1, arg2, arg3);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SemaphoreV, 0 | 0);

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_open(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = 0;
  void *argp1 = 0;
  int res1 = 0;
  SemaphoreV *result = 0;

  if (static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_open.");
  }

  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Token, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_open"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token &"
                                             "'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference "
                                         "in method '"
                                         "SemaphoreV_open"
                                         "', argument "
                                         "1"
                                         " of type '"
                                         "Token &"
                                         "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  {
    try {
      result = (SemaphoreV *)SemaphoreV::open(*arg1);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SemaphoreV, 0 | 0);

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_unlink(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Token *arg1 = 0;
  void *argp1 = 0;
  int res1 = 0;

  if (static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_unlink.");
  }

  res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_Token, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_unlink"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "Token &"
                                             "'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference "
                                         "in method '"
                                         "SemaphoreV_unlink"
                                         "', argument "
                                         "1"
                                         " of type '"
                                         "Token &"
                                         "'");
  }
  arg1 = reinterpret_cast<Token *>(argp1);
  {
    try {
      SemaphoreV::unlink(*arg1);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_wait__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_wait"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      (arg1)->wait();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_wait__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  unsigned int arg2;
  void *argp1 = 0;
  int res1 = 0;
  unsigned int val2;
  int ecode2 = 0;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_wait"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "SemaphoreV_wait"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "unsigned int"
                                               "'");
  }
  arg2 = static_cast<unsigned int>(val2);
  {
    try {
      (arg1)->wait(arg2);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value
_exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV__wrap_SemaphoreV_wait(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_wait__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_wait__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_wait__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_wait__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  SWIG_Error(SWIG_ERROR, "Illegal arguments for function wait.");

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_trywait__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;
  bool result;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_trywait"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      result = (bool)(arg1)->trywait();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_bool SWIG_NAPI_FROM_CALL_ARGS(static_cast<bool>(result));

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_trywait__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  unsigned int arg2;
  void *argp1 = 0;
  int res1 = 0;
  unsigned int val2;
  int ecode2 = 0;
  bool result;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_trywait"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "SemaphoreV_trywait"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "unsigned int"
                                               "'");
  }
  arg2 = static_cast<unsigned int>(val2);
  {
    try {
      result = (bool)(arg1)->trywait(arg2);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_bool SWIG_NAPI_FROM_CALL_ARGS(static_cast<bool>(result));

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value
_exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV__wrap_SemaphoreV_trywait(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_trywait__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_trywait__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_trywait__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_trywait__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  SWIG_Error(SWIG_ERROR, "Illegal arguments for function trywait.");

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_post__SWIG_0(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_post"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      (arg1)->post();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_overloaded_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_post__SWIG_1(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  unsigned int arg2;
  void *argp1 = 0;
  int res1 = 0;
  unsigned int val2;
  int ecode2 = 0;

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_post"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '"
                                               "SemaphoreV_post"
                                               "', argument "
                                               "2"
                                               " of type '"
                                               "unsigned int"
                                               "'");
  }
  arg2 = static_cast<unsigned int>(val2);
  {
    try {
      (arg1)->post(arg2);
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function_dispatcher
template <typename SWIG_OBJ_WRAP>
Napi::Value
_exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV__wrap_SemaphoreV_post(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 0 && static_cast<int>(info.Length()) <= 0) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_post__SWIG_0(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_post__SWIG_0(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  // js_function_dispatch_case
  if (static_cast<int>(info.Length()) >= 1 && static_cast<int>(info.Length()) <= 1) {
#ifdef NAPI_CPP_EXCEPTIONS
    bool tryNext = false;
    try {
      jsresult = _wrap_SemaphoreV_post__SWIG_1(info);
    } catch (const Napi::TypeError &) {
      tryNext = true;
    } catch (const Napi::Error &e) {
      throw e;
    }
    if (!tryNext)
      return jsresult;
#else
    _wrap_SemaphoreV_post__SWIG_1(info);
    if (env.IsExceptionPending()) {
      Napi::Error e = env.GetAndClearPendingException();
      Napi::Value typeErrorValue;
      bool isTypeError;
      Napi::Function typeErrorCons;
      // Yes, this is ugly
      // TODO: Fix this in Node.js when the core team grows up
      NAPI_CHECK_RESULT(env.Global().Get("TypeError"), typeErrorValue);
      typeErrorCons = typeErrorValue.As<Napi::Function>();
      NAPI_CHECK_RESULT(e.Value().InstanceOf(typeErrorCons), isTypeError);
      if (!isTypeError) {
        // This is not the error you are looking for
        e.ThrowAsJavaScriptException();
        SWIG_fail;
      }
    } else {
      return jsresult;
    }
#endif
  }

  SWIG_Error(SWIG_ERROR, "Illegal arguments for function post.");

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_valueOf(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;
  unsigned int result;

  if (static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_valueOf.");
  }

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_valueOf"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      result = (unsigned int)(arg1)->valueOf();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_int SWIG_NAPI_FROM_CALL_ARGS(static_cast<unsigned int>(result));

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_refs(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;
  unsigned int result;

  if (static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_refs.");
  }

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_refs"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      result = (unsigned int)(arg1)->refs();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_int SWIG_NAPI_FROM_CALL_ARGS(static_cast<unsigned int>(result));

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_wrap_SemaphoreV_close(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SemaphoreV *arg1 = (SemaphoreV *)0;
  void *argp1 = 0;
  int res1 = 0;

  if (static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SemaphoreV_close.");
  }

  res1 = SWIG_ConvertPtr(info.This(), &argp1, SWIGTYPE_p_SemaphoreV, 0 | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '"
                                             "SemaphoreV_close"
                                             "', argument "
                                             "1"
                                             " of type '"
                                             "SemaphoreV *"
                                             "'");
  }
  arg1 = reinterpret_cast<SemaphoreV *>(argp1);
  {
    try {
      (arg1)->close();
    } catch (std::system_error &e) {
      throwJavaScriptError(e, info.Env());
      SWIG_fail;
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = env.Undefined();

  return jsresult;

  goto fail;
fail:
  return Napi::Value();
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP> _exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::~_exports_SemaphoreV_templ() {
  auto arg1 = reinterpret_cast<SemaphoreV *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}

// js_veto_ctor
template <typename SWIG_OBJ_WRAP>
_exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_exports_SemaphoreV_templ(const Napi::CallbackInfo &info)
    : SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS as its
    // base abstract class
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  SWIG_Error(SWIG_ERROR, "Class SemaphoreV can not be instantiated");
  return;
  goto fail;
fail:
  return;
}

// This is the extendable constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_SemaphoreV_templ<SWIG_OBJ_WRAP>::_exports_SemaphoreV_templ(bool, const Napi::CallbackInfo &info)
    : SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {}

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_SemaphoreV = {"_p_SemaphoreV", "p_SemaphoreV|SemaphoreV *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_Token = {"_p_Token", "Token *|p_Token", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void *)0, 0};
static swig_type_info _swigt__p_key_t = {"_p_key_t", "key_t *", 0, 0, (void *)0, 0};

static swig_type_info *swig_type_initial[] = {
    &_swigt__p_SemaphoreV,
    &_swigt__p_Token,
    &_swigt__p_char,
    &_swigt__p_key_t,
};

static swig_cast_info _swigc__p_SemaphoreV[] = {{&_swigt__p_SemaphoreV, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_Token[] = {{&_swigt__p_Token, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {{&_swigt__p_char, 0, 0, 0}, {0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_t[] = {{&_swigt__p_key_t, 0, 0, 0}, {0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
    _swigc__p_SemaphoreV,
    _swigc__p_Token,
    _swigc__p_char,
    _swigc__p_key_t,
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module)
    : env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference *[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete[] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr)
    return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata) SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE Napi::Env

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next == 0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter = module_head;
    do {
      if (iter == &swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter = iter->next;
    } while (iter != module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0)
    return;

    /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret)
          printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast)
            printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast)
            ret = 0;
        }
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n", j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
 * any new swig_type_info structures that have been added into the list
 * of equivalent types.  It is like calling
 * SWIG_TypeClientData(type, clientdata) a second time.
 */
SWIGRUNTIME void SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run)
    return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);

  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */

  /* register classes */
  /* Class: Token (_exports_Token) */
  // jsnapi_registerclass
  Napi::Function _exports_Token_ctor = _exports_Token_inst::GetClass(env);
  exports.Set("Token", _exports_Token_ctor);
  if (SWIGTYPE_p_Token->clientdata == nullptr) {
    SWIGTYPE_p_Token->clientdata = new size_t(0);
  }
  Napi::FunctionReference *_exports_Token_ctor_ref = new Napi::FunctionReference();
  *_exports_Token_ctor_ref = Napi::Persistent(_exports_Token_ctor);
  env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_Token_ctor_ref;
  /* Class: SemaphoreV (_exports_SemaphoreV) */
  // jsnapi_registerclass
  Napi::Function _exports_SemaphoreV_ctor = _exports_SemaphoreV_inst::GetClass(env);
  exports.Set("SemaphoreV", _exports_SemaphoreV_ctor);
  if (SWIGTYPE_p_SemaphoreV->clientdata == nullptr) {
    SWIGTYPE_p_SemaphoreV->clientdata = new size_t(1);
  }
  Napi::FunctionReference *_exports_SemaphoreV_ctor_ref = new Napi::FunctionReference();
  *_exports_SemaphoreV_ctor_ref = Napi::Persistent(_exports_SemaphoreV_ctor);
  env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_SemaphoreV_ctor_ref;

  /* enable inheritance */

  Napi::Value jsObjectValue, jsSetProtoValue;
  Napi::Object jsObject;
  Napi::Function setProto;
  NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
  NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
  NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
  setProto = jsSetProtoValue.As<Napi::Function>();

  /* setup inheritances */

  // Inheritance for _exports_Token (Token) <- SWIG_NAPI_ObjectWrap
  // jsnapi_setup_inheritance
  do {
    Napi::Value protoBase, protoSub;
    NAPI_CHECK_RESULT(_exports_Token_ctor.Get("prototype"), protoSub);
    NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
    NAPI_CHECK_MAYBE(setProto.Call({_exports_Token_ctor, SWIG_NAPI_ObjectWrap_ctor}));
    NAPI_CHECK_MAYBE(setProto.Call({protoSub, protoBase}));
  } while (0);

  // Inheritance for _exports_SemaphoreV (SemaphoreV) <- SWIG_NAPI_ObjectWrap
  // jsnapi_setup_inheritance
  do {
    Napi::Value protoBase, protoSub;
    NAPI_CHECK_RESULT(_exports_SemaphoreV_ctor.Get("prototype"), protoSub);
    NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
    NAPI_CHECK_MAYBE(setProto.Call({_exports_SemaphoreV_ctor, SWIG_NAPI_ObjectWrap_ctor}));
    NAPI_CHECK_MAYBE(setProto.Call({protoSub, protoBase}));
  } while (0);

  /* create and register namespace objects */

  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(main, Init)
